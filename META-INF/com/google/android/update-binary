#!/sbin/sh
# OpenSUSE GSI Backend
# Based on ubports GSI script by erfanoabdi @ xda-developers

OUTFD=/proc/self/fd/$2;
ZIP="$3";
DIR=`dirname "$ZIP"`;

should_mount() {
    if cat /proc/mounts | awk '{ print $2 }' | grep -q "^$1\$"; then
        # Already mounted
        return 1;
    else
        # Should mount!
        return 0;
    fi
}

mount_vendor(){
  # detect vendor partition based on current boot slot for treble devices
  current_slot=$(grep -o 'androidboot\.slot_suffix=_[a-b]' /proc/cmdline)
  case "${current_slot}" in
    "androidboot.slot_suffix=_a")
      target_partition="vendor_a"
      ;;
    "androidboot.slot_suffix=_b")
      target_partition="vendor_b"
      ;;
    "")
      # No A/B
      target_partition="vendor"
      ;;
    *)
      error "Unknown error while searching for a vendor partition, exiting"
      ;;
  esac

  partition=$(find /dev/block/platform -name ${target_partition} | head -n 1)
  if [ -n "${partition}" ]; then
    ui_print "Found vendor partition for current slot ${partition}"

    # mount vendor partition
    mount -o ro ${partition} /vendor

    ui_print "Vendor mounted"
  fi
}

ui_print() {
  until [ ! "$1" ]; do
    echo -e "ui_print $1\nui_print" > $OUTFD;
    shift;
  done;
}

show_progress() { echo "progress $1 $2" > $OUTFD; }
set_perm_recursive() {
  dirs=$(echo $* | $bb awk '{ print substr($0, index($0,$5)) }');
  for i in $dirs; do
    chown -R $1.$2 $i; chown -R $1:$2 $i;
    find "$i" -type d -exec chmod $3 {} +;
    find "$i" -type f -exec chmod $4 {} +;
  done;
}

abort() { ui_print "$*"; umount /vendor; umount /data; exit 1; }

show_progress 1.34 4;
ui_print " ";
ui_print "***";
ui_print "OpenSUSE GSI installer";
ui_print "***";
ui_print " ";
ui_print " ";

# mount vendor and data
if should_mount /vendor; then
    mount_vendor;
    vendor_mounted="yes";
fi;

if should_mount /data; then
    mount /data;
    data_mounted="yes";
fi;

# create tmp directory
mkdir -p /data/opensuse;
cd /data/opensuse;

# unzip busybox and rootfs
ui_print "Installing GSI...";
unzip -o "$ZIP";

if [ $? != 0 -o -z "$(ls /data/opensuse/tools)" ]; then
  abort "Unzip failed. Aborting...";
fi;

# set busybox permissions
chmod -R 755 /data/opensuse/tools
bb=/data/opensuse/tools/busybox;

# run setup.sh on busybox's ash
$bb ash /data/opensuse/setup.sh $2;
if [ $? != "0" ]; then
  abort;
fi;

# delete tmp directory
rm -rf /data/opensuse;

# umount vendor and data
[ "$vendor_mounted" == "yes" ] && umount /vendor;
[ "$data_mounted" == "yes" ] && umount /data;

ui_print " ";
ui_print "Done!";

